<?xml version="1.0" encoding="UTF-8"?>
<!-- Lenguaje de Marcas-->
<!-- Tasca 3.1 Creación de un archivo XSD para validar el XML del proyecto VLC-->
<!-- José Jiménez Beltrán y Daniel Fernández Rodríguez -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <xs:element name="library">
  <!-- El elemento library es un complexType porque contiene otros elementos -->
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="tracks"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="tracks">
  <!-- El elemento tracks es un complexType porque contiene otros elementos -->
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="track"/>
        <!-- El elemento track es unbounded ya que no hay limite en las veces que puede salir -->
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="track">
  <!-- El elemento track es un complexType porque contiene otros elementos -->
    <xs:complexType>
      <xs:sequence>
      <!-- Track esta en sequence ya que queremos que los datos salgan de manera ordenada -->
        <xs:element ref="id"/>
        <xs:element ref="name"/>
        <xs:element ref="miliseconds"/>
        <xs:element ref="bytes"/>
        <xs:element ref="path"/>
        <xs:element ref="media_type"/>
        <xs:element ref="genres"/>
        <xs:element ref="artists"/>
        <xs:element ref="composers"/>
        <xs:element ref="albums"/>
        <xs:element ref="playlists"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- miliseconds, bytes y path son simpleType ya que no contienen otros elementos ni atributos -->
  <xs:element name="miliseconds" type="xs:integer"/> <!-- Es integer ya que solo contendrá números-->
  <xs:element name="bytes" type="xs:integer"/> <!-- Es integer ya que solo contendrá números-->
  <xs:element name="path" type="xs:string"/> <!-- Es string ya que contendrá una cadena de caracteres-->
  <xs:element name="media_type">
  <!-- El elemento media_type es un complexType porque contiene otros elementos -->
    <xs:complexType>
      <xs:sequence>
      <!-- media_type esta en sequence ya que queremos que los datos salgan de manera ordenada -->
        <xs:element ref="id"/>
        <xs:element ref="name"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="genres">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="genre"/>
        <!-- El elemento genre es unbounded ya que no hay limite en las veces que puede salir-->
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="genre">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="id"/>
        <xs:element ref="name"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="artists">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="artist"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="artist">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="id"/>
        <xs:element ref="name"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="composers">
  <!-- Artists, composers, albums son complexType ya que contienen otros elementos-->
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="composer"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="composer">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="id"/>
        <xs:element ref="name"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="albums">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="album"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="album">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="id"/>
        <xs:element ref="title"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- Dentro del elemento title solo puede haber string-->
  <!-- title es simpleType ya que no contiene otros elementos ni atributos -->
  <xs:element name="title" type="xs:string"/>
  <xs:element name="playlists">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="playlist"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="playlist">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="id"/>
        <xs:element ref="name"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- Todos los elementos llamados id serán integer, gracias a la referencia (ref) -->
  <xs:element name="id" type="xs:integer"/>
  <!-- Todos los elementos llamados name serán string, gracias a la referencia (ref) -->
  <xs:element name="name" type="xs:string"/>
</xs:schema>
